extends layout

block content
  body
    h1 Hello, World!
      section.experiment
        h2.header
          Record Audio ( <a href="http://recordrtc.org/" title="API Documentation">RecordRTC.org</a> )

        div.inner(style="height: 5em;")
          audio#audio(autoplay="autoplay", controls="controls")
          button#start-recording Record
          button#stop-recording(disabled="disabled") Stop
          h2#audio-url-preview

  script.
            var startRecording = document.getElementById('start-recording');
            var stopRecording = document.getElementById('stop-recording');
            var audioPreview = document.getElementById('audio');

            var audio = document.querySelector('audio');

            var isFirefox = !!navigator.mozGetUserMedia;

            var recordAudio;
            startRecording.onclick = function() {
                startRecording.disabled = true;
                navigator.getUserMedia({
                        audio: true,
                        video: false
                    }, function(stream) {
                        recordAudio = RecordRTC(stream, {
                            bufferSize: 16384
                        });

                        recordAudio.startRecording();

                        stopRecording.disabled = false;
                    }, function(error) {
                        alert(JSON.stringify(error));
                    });
            };

            stopRecording.onclick = function() {
                startRecording.disabled = false;
                stopRecording.disabled = true;

                recordAudio.stopRecording(function() {
                    if (isFirefox) onStopRecording();
                });

                if (!isFirefox) {
                    onStopRecording();
                }

                function onStopRecording() {
                    recordAudio.getDataURL(function(audioDataURL) {
                        postFiles(audioDataURL);
                    });
                }
            };

            var fileName;

            function postFiles(audioDataURL) {
                fileName = getRandomString();
                var files = { };

                files.audio = {
                    name: fileName + '.wav',
                    type: 'audio/wav',
                    contents: audioDataURL
                };

                files.isFirefox = isFirefox;

                xhr('/upload', JSON.stringify(files), function(_fileName) {
                    var href = location.href.substr(0, location.href.lastIndexOf('/') + 1);
                    audioPreview.src = href + 'uploads/' + _fileName;
                    audioPreview.play();

                    var h2 = document.createElement('h2');
                    h2.innerHTML = '<a href="' + audioPreview.src + '">' + audioPreview.src + '</a>';
                    document.body.appendChild(h2);
                });
            }

            function xhr(url, data, callback) {
                var request = new XMLHttpRequest();
                request.onreadystatechange = function() {
                    if (request.readyState == 4 && request.status == 200) {
                        callback(request.responseText);
                    }
                };
                request.open('POST', url);
                console.log(url);
                console.log(data);
                request.send(data);
            }

            window.onbeforeunload = function() {
                startRecording.disabled = false;
            };

            function getRandomString() {
                if (window.crypto) {
                    var a = window.crypto.getRandomValues(new Uint32Array(3)),
                        token = '';
                    for (var i = 0, l = a.length; i < l; i++) token += a[i].toString(36);
                    return token;
                } else {
                    return (Math.random() * new Date().getTime()).toString(36).replace( /\./g , '');
                }
            }
